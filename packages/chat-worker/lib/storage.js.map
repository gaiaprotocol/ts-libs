{"version":3,"file":"storage.js","sourceRoot":"","sources":["../src/storage.ts"],"names":[],"mappings":"AAGA,MAAM,OAAO,WAAW;IACF;IAAiC;IAAiC;IAAtF,YAAoB,GAAuB,EAAU,GAAuB,EAAU,cAAc,EAAE;QAAlF,QAAG,GAAH,GAAG,CAAoB;QAAU,QAAG,GAAH,GAAG,CAAoB;QAAU,gBAAW,GAAX,WAAW,CAAK;IAAI,CAAC;IAE3G,KAAK,CAAC,WAAW,CAAC,OAAe,EAAE,IAAY,EAAE,WAAyB;QACxE,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;QACtC,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAE7B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC;;;KAGxC,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC;QAE7E,OAAO,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;IACjC,CAAC;IAED,KAAK,CAAC,kBAAkB;QACtB,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC;QAEtC,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC;;;;;;KAM7C,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,EAMjC,CAAC;QAEL,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;YACnC,EAAE,EAAE,GAAG,CAAC,EAAE;YACV,IAAI,EAAE,MAAM;YACZ,OAAO,EAAE,GAAG,CAAC,OAAO;YACpB,IAAI,EAAE,GAAG,CAAC,IAAI;YACd,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC;YACxC,SAAS,EAAE,GAAG,CAAC,SAAS;SACzB,CAAC,CAAC,CAAC;IACN,CAAC;CACF","sourcesContent":["import { D1Database, DurableObjectState } from '@cloudflare/workers-types';\nimport { Attachment, ChatMessage } from './types/chat';\n\nexport class ChatStorage {\n  constructor(private env: { DB: D1Database }, private ctx: DurableObjectState, private maxMessages = 50) { }\n\n  async saveMessage(account: string, text: string, attachments: Attachment[]) {\n    const roomId = this.ctx.id.toString();\n    const timestamp = Date.now();\n\n    const result = await this.env.DB.prepare(`\n      INSERT INTO messages (room_id, account, text, attachments, timestamp)\n      VALUES (?, ?, ?, ?, ?)\n    `).bind(roomId, account, text, JSON.stringify(attachments), timestamp).run();\n\n    return result.meta.last_row_id;\n  }\n\n  async loadRecentMessages(): Promise<ChatMessage[]> {\n    const roomId = this.ctx.id.toString();\n\n    const { results } = await this.env.DB.prepare(`\n      SELECT id, account, text, attachments, timestamp\n      FROM messages\n      WHERE room_id = ?\n      ORDER BY id DESC\n      LIMIT ?\n    `).bind(roomId, this.maxMessages).all<{\n      id: number;\n      account: string;\n      text: string;\n      attachments: string;\n      timestamp: number;\n    }>();\n\n    return results.reverse().map(row => ({\n      id: row.id,\n      type: 'chat',\n      account: row.account,\n      text: row.text,\n      attachments: JSON.parse(row.attachments),\n      timestamp: row.timestamp,\n    }));\n  }\n}\n"]}