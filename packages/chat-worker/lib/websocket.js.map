{"version":3,"file":"websocket.js","sourceRoot":"","sources":["../src/websocket.ts"],"names":[],"mappings":"AAKA,MAAM,OAAO,gBAAgB;IAC3B,QAAQ,GAAa,EAAE,CAAC;IAExB,gBAAgB,CAAC,MAAiB,EAAE,OAAe,EAAE,UAAwC;QAC3F,MAAM,CAAC,MAAM,EAAE,CAAC;QAChB,MAAM,MAAM,GAAW,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC;QAC3C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAE3B,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE;YACpC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE;YACpC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,cAAc,CAAC,KAAK,IAAI,EAAE;YACxB,IAAI,CAAC;gBACH,MAAM,OAAO,GAAG,MAAM,UAAU,EAAE,CAAC;gBACnC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;YACnE,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACb,OAAO,CAAC,KAAK,CAAC,4BAA4B,OAAO,EAAE,EAAE,GAAG,CAAC,CAAC;YAC5D,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,SAAS,CAAC,OAAoB;QAC5B,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;QACrC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE,EAAE;YAC5C,IAAI,CAAC;gBACH,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpB,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACb,OAAO,CAAC,KAAK,CAAC,qBAAqB,OAAO,EAAE,EAAE,GAAG,CAAC,CAAC;gBACnD,MAAM,CAAC,KAAK,EAAE,CAAC;YACjB,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["import { WebSocket } from '@cloudflare/workers-types';\nimport { ChatMessage } from './types/chat';\n\ninterface Client { account: string; socket: WebSocket }\n\nexport class WebSocketManager {\n  #clients: Client[] = [];\n\n  handleConnection(socket: WebSocket, account: string, getHistory: () => Promise<ChatMessage[]>) {\n    socket.accept();\n    const client: Client = { account, socket };\n    this.#clients.push(client);\n\n    socket.addEventListener('close', () => {\n      this.#clients = this.#clients.filter((c) => c !== client);\n    });\n    socket.addEventListener('error', () => {\n      this.#clients = this.#clients.filter((c) => c !== client);\n    });\n\n    queueMicrotask(async () => {\n      try {\n        const history = await getHistory();\n        socket.send(JSON.stringify({ type: 'init', messages: history }));\n      } catch (err) {\n        console.error(`Error sending history to ${account}`, err);\n      }\n    });\n  }\n\n  broadcast(message: ChatMessage) {\n    const json = JSON.stringify(message);\n    this.#clients.forEach(({ socket, account }) => {\n      try {\n        socket.send(json);\n      } catch (err) {\n        console.error(`Failed to send to ${account}`, err);\n        socket.close();\n      }\n    });\n  }\n}\n"]}