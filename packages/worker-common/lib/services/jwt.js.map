{"version":3,"file":"jwt.js","sourceRoot":"","sources":["../../src/services/jwt.ts"],"names":[],"mappings":"AAAA,OAAO,GAAmB,MAAM,8BAA8B,CAAC;AAE/D,KAAK,UAAU,aAAa,CAAC,OAAe,EAAE,GAA2B;IACvE,MAAM,OAAO,GAAG;QACd,GAAG,EAAE,OAAO;QACZ,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;KACnC,CAAC;IAEF,MAAM,KAAK,GAAG,MAAM,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,UAAU,CAAC,CAAC;IACtD,OAAO,KAAK,CAAC;AACf,CAAC;AAED,KAAK,UAAU,WAAW,CAAC,KAAa,EAAE,GAA2B;IACnE,MAAM,KAAK,GAAG,MAAM,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,UAAU,CAAC,CAAC;IACtD,IAAI,CAAC,KAAK;QAAE,OAAO,SAAS,CAAC;IAE7B,MAAM,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACtC,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,CAAC","sourcesContent":["import jwt, { JwtPayload } from '@tsndr/cloudflare-worker-jwt';\n\nasync function generateToken(address: string, env: { JWT_SECRET: string }): Promise<string> {\n  const payload = {\n    sub: address,\n    iat: Math.floor(Date.now() / 1000),\n  };\n\n  const token = await jwt.sign(payload, env.JWT_SECRET);\n  return token;\n}\n\nasync function verifyToken(token: string, env: { JWT_SECRET: string }): Promise<JwtPayload | undefined> {\n  const valid = await jwt.verify(token, env.JWT_SECRET);\n  if (!valid) return undefined;\n\n  const { payload } = jwt.decode(token);\n  return payload;\n}\n\nexport { generateToken, verifyToken };\n"]}