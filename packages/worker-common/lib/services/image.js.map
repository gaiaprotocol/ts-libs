{"version":3,"file":"image.js","sourceRoot":"","sources":["../../src/services/image.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;AAEvC,SAAS,mBAAmB,CAAC,MAAmB;IAC9C,IAAI,MAAM,GAAG,EAAE,CAAC;IAChB,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC;IACrC,MAAM,GAAG,GAAG,KAAK,CAAC,UAAU,CAAC;IAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;QAC7B,MAAM,IAAI,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1C,CAAC;IACD,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC;AACtB,CAAC;AAED,MAAM,UAAU,WAAW,CACzB,KAAa,EACb,MAAc,EACd,UAAyB,EACzB,WAOC;IAED,IAAI,GAAG,GACL,kDAAkD,KAAK,aAAa,MAAM,IAAI,CAAC;IACjF,UAAU,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;QAC5B,MAAM,YAAY,GAAG,mBAAmB,CAAC,MAAM,CAAC,CAAC;QACjD,GAAG;YACD,sCAAsC,YAAY,wBAAwB,KAAK,aAAa,MAAM,MAAM,CAAC;IAC7G,CAAC,CAAC,CAAC;IAEH,IAAI,WAAW,EAAE,CAAC;QAChB,MAAM,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,GAAG,WAAW,CAAC;QAC9C,GAAG,IAAI;;;qCAG0B,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,SAAS,CAAC,CACrE;;6CAEuC,WAAW,CAAC,QAAQ,YAAY,WAAW,CAAC,KAAK;SACrF,CAAC;QACN,GAAG;YACD,YAAY,CAAC,QAAQ,CAAC,sDAAsD,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC;iBACpG,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC;iBACrB,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC;iBACrB,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC;iBACvB,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC;iBACvB,OAAO,CAAC,kBAAkB,EAAE,EAAE,CAAC;iBAC/B,IAAI,EACP,SAAS,CAAC;IACd,CAAC;IAED,GAAG,IAAI,QAAQ,CAAC;IAChB,MAAM,KAAK,GAAG,IAAI,KAAK,CACrB,GAAG,EACH,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;QAC1D,KAAK,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE;QACtC,IAAI,EAAE;YACJ,WAAW,EAAE,CAAC,WAAW,CAAC,SAAS,CAAC;YACpC,iBAAiB,EAAE,YAAY;YAC/B,eAAe,EAAE,KAAK;SACvB;KACF,CACF,CAAC;IACF,OAAO,KAAK,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC;AAChC,CAAC","sourcesContent":["import { Resvg } from '@cf-wasm/resvg';\n\nfunction arrayBufferToBase64(buffer: ArrayBuffer): string {\n  let binary = '';\n  const bytes = new Uint8Array(buffer);\n  const len = bytes.byteLength;\n  for (let i = 0; i < len; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return btoa(binary);\n}\n\nexport function combinePngs(\n  width: number,\n  height: number,\n  pngBuffers: ArrayBuffer[],\n  textOptions?: {\n    fontBytes: Uint8Array;\n    x: number;\n    y: number;\n    text: string;\n    fontSize: number;\n    color: string;\n  },\n): Uint8Array<ArrayBufferLike> {\n  let svg =\n    `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${width}\" height=\"${height}\">`;\n  pngBuffers.forEach((buffer) => {\n    const base64String = arrayBufferToBase64(buffer);\n    svg +=\n      `<image href=\"data:image/png;base64,${base64String}\" x=\"0\" y=\"0\" width=\"${width}\" height=\"${height}\" />`;\n  });\n\n  if (textOptions) {\n    const { fontBytes, x, y, text } = textOptions;\n    svg += `<style>\n@font-face {\n  font-family: \"customFont\";\n  src: url('data:font/woff2;base64,${btoa(String.fromCharCode(...fontBytes))\n      }') format(\"woff2\");\n}\ntext { font-family:\"customFont\"; font-size:${textOptions.fontSize}px; fill:${textOptions.color}; }\n</style>`;\n    svg +=\n      `<text x=\"${x}\" y=\"${y}\" dominant-baseline=\"central\" text-anchor=\"middle\">${text.replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#039;')\n        .replace(/[\\x00-\\x1F\\x7F]/g, '')\n        .trim()\n      }</text>`;\n  }\n\n  svg += '</svg>';\n  const resvg = new Resvg(\n    svg,\n    !textOptions ? { fitTo: { mode: 'width', value: width } } : {\n      fitTo: { mode: 'width', value: width },\n      font: {\n        fontBuffers: [textOptions.fontBytes],\n        defaultFontFamily: 'customFont',\n        loadSystemFonts: false,\n      },\n    },\n  );\n  return resvg.render().asPng();\n}"]}