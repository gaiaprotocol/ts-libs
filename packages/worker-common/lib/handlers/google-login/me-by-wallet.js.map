{"version":3,"file":"me-by-wallet.js","sourceRoot":"","sources":["../../../src/handlers/google-login/me-by-wallet.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAClC,OAAO,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;AAEjD,MAAM,CAAC,KAAK,UAAU,sBAAsB,CAC1C,OAAgB,EAChB,GAA2C;IAE3C,IAAI,CAAC;QACH,MAAM,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QAClD,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;YACjC,OAAO,IAAI,QAAQ,CAAC,cAAc,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;QACvD,CAAC;QAED,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC5B,MAAM,OAAO,GAAG,MAAM,WAAW,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC9C,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC;YAClB,OAAO,IAAI,QAAQ,CAAC,cAAc,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;QACvD,CAAC;QAED,MAAM,iBAAiB,GAAG,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAElD,MAAM,GAAG,GAAG,MAAM,GAAG,CAAC,EAAE,CAAC,OAAO,CAC9B;;gCAE0B,CAC3B;aACE,IAAI,CAAC,iBAAiB,CAAC;aACvB,KAAK,EAQF,CAAC;QAEP,IAAI,CAAC,GAAG,EAAE,CAAC;YACT,OAAO,QAAQ,CAAC,IAAI,CAClB,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,mBAAmB,EAAE,cAAc,EAAE,iBAAiB,EAAE,EAC5E,EAAE,MAAM,EAAE,GAAG,EAAE,CAChB,CAAC;QACJ,CAAC;QAED,OAAO,QAAQ,CAAC,IAAI,CAAC;YACnB,EAAE,EAAE,IAAI;YACR,cAAc,EAAE,GAAG,CAAC,cAAc;YAClC,UAAU,EAAE,GAAG,CAAC,UAAU;YAC1B,KAAK,EAAE,GAAG,CAAC,KAAK;YAChB,SAAS,EAAE,GAAG,CAAC,SAAS;YACxB,OAAO,EAAE;gBACP,GAAG,EAAE,GAAG,CAAC,UAAU;gBACnB,KAAK,EAAE,GAAG,CAAC,KAAK;gBAChB,IAAI,EAAE,GAAG,CAAC,IAAI;gBACd,OAAO,EAAE,GAAG,CAAC,OAAO;aACrB;SACF,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACnB,OAAO,QAAQ,CAAC,IAAI,CAClB,EAAE,KAAK,EAAE,GAAG,YAAY,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,EAC3D,EAAE,MAAM,EAAE,GAAG,EAAE,CAChB,CAAC;IACJ,CAAC;AACH,CAAC","sourcesContent":["import { D1Database } from '@cloudflare/workers-types';\nimport { getAddress } from 'viem';\nimport { verifyToken } from '../../services/jwt';\n\nexport async function handleGoogleMeByWallet(\n  request: Request,\n  env: { DB: D1Database; JWT_SECRET: string }\n): Promise<Response> {\n  try {\n    const auth = request.headers.get('authorization');\n    if (!auth?.startsWith('Bearer ')) {\n      return new Response('Unauthorized', { status: 401 });\n    }\n\n    const token = auth.slice(7);\n    const payload = await verifyToken(token, env);\n    if (!payload?.sub) {\n      return new Response('Unauthorized', { status: 401 });\n    }\n\n    const normalizedAddress = getAddress(payload.sub);\n\n    const row = await env.DB.prepare(\n      `SELECT google_sub, wallet_address, token, linked_at, email, name, picture\n       FROM google_web3_accounts\n       WHERE wallet_address = ?`\n    )\n      .bind(normalizedAddress)\n      .first<{\n        google_sub: string;\n        wallet_address: string;\n        token: string;\n        linked_at: number;\n        email: string | null;\n        name: string | null;\n        picture: string | null;\n      }>();\n\n    if (!row) {\n      return Response.json(\n        { ok: false, error: 'no_account_linked', wallet_address: normalizedAddress },\n        { status: 404 },\n      );\n    }\n\n    return Response.json({\n      ok: true,\n      wallet_address: row.wallet_address,\n      google_sub: row.google_sub,\n      token: row.token,\n      linked_at: row.linked_at,\n      profile: {\n        sub: row.google_sub,\n        email: row.email,\n        name: row.name,\n        picture: row.picture,\n      },\n    });\n  } catch (err) {\n    console.error(err);\n    return Response.json(\n      { error: err instanceof Error ? err.message : String(err) },\n      { status: 500 },\n    );\n  }\n}\n"]}