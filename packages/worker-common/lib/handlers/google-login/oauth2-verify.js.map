{"version":3,"file":"oauth2-verify.js","sourceRoot":"","sources":["../../../src/handlers/google-login/oauth2-verify.ts"],"names":[],"mappings":"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","sourcesContent":["import { z } from 'zod'\nimport { corsHeadersWithOrigin } from '../../services/cors'\nimport { decodeJwtPayload } from './google'\nimport { headersWithCookies, makeSessionCookie } from './utils'\n\n/**\n * Google OpenID Connect JWKS endpoint\n * (Google의 OIDC Discovery의 jwks_uri)\n */\nconst GOOGLE_JWKS_URL = 'https://www.googleapis.com/oauth2/v3/certs'\nconst ALLOWED_ISSUERS = ['https://accounts.google.com', 'accounts.google.com']\nconst CLOCK_SKEW_SEC = 300 // ±5분 허용\n\n// ─────────────────────────────────────────────────────────────\n// 유틸: base64url 디코딩\n// ─────────────────────────────────────────────────────────────\nfunction b64urlToUint8Array(b64url: string): Uint8Array {\n  const pad = (s: string) => s + '==='.slice((s.length + 3) % 4)\n  const b64 = pad(b64url.replace(/-/g, '+').replace(/_/g, '/'))\n  const raw = atob(b64)\n  const out = new Uint8Array(raw.length)\n  for (let i = 0; i < raw.length; i++) out[i] = raw.charCodeAt(i)\n  return out\n}\n\nfunction textToUint8Array(s: string): Uint8Array {\n  return new TextEncoder().encode(s)\n}\n\n// ─────────────────────────────────────────────────────────────\n// JWKS 가져오기(Cloudflare Workers 캐시 활용)\n// ─────────────────────────────────────────────────────────────\nasync function fetchGoogleJwks(): Promise<any> {\n  const req = new Request(GOOGLE_JWKS_URL, {\n    // @ts-ignore - Cloudflare Workers에서 cf 옵션 사용\n    cf: { cacheTtl: 3600, cacheEverything: true }\n  })\n  // @ts-ignore - Cloudflare Workers에서 cf 옵션 사용\n  const cache = caches.default\n  const cached = await cache.match(req)\n  if (cached) return cached.json()\n\n  const res = await fetch(req)\n  if (!res.ok) throw new Error(`Failed to fetch Google JWKS: ${res.status}`)\n  const data = await res.clone().json()\n  await cache.put(req, res) // 캐시에 넣기\n  return data\n}\n\n// ─────────────────────────────────────────────────────────────\n// JWK → CryptoKey (RS256)\n// ─────────────────────────────────────────────────────────────\nasync function importJwkForVerify(jwk: JsonWebKey): Promise<CryptoKey> {\n  return crypto.subtle.importKey(\n    'jwk',\n    jwk,\n    { name: 'RSASSA-PKCS1-v1_5', hash: 'SHA-256' },\n    false,\n    ['verify']\n  )\n}\n\n// ─────────────────────────────────────────────────────────────\n// ID 토큰 서명/클레임 검증 (별도 함수)\n// ─────────────────────────────────────────────────────────────\nexport async function verifyGoogleIdJwt(idToken: string, expectedAud: string, expectedNonce?: string) {\n  // 1) 토큰 파츠\n  const parts = idToken.split('.')\n  if (parts.length !== 3) throw new Error('invalid_jwt_format')\n  const [headerB64, payloadB64, sigB64] = parts\n\n  // 2) 헤더 확인(kid/alg)\n  const headerJson = JSON.parse(\n    new TextDecoder().decode(b64urlToUint8Array(headerB64))\n  )\n  if (headerJson.alg !== 'RS256') throw new Error('unsupported_alg')\n  const kid: string | undefined = headerJson.kid\n  if (!kid) throw new Error('missing_kid')\n\n  // 3) JWKS에서 kid 매칭 키 획득\n  const jwks = await fetchGoogleJwks() // { keys: [...] }\n  const jwk = (jwks.keys || []).find((k: any) => k.kid === kid)\n  if (!jwk) throw new Error('kid_not_found')\n\n  // 4) 서명 검증\n  const key = await importJwkForVerify(jwk)\n  const data = textToUint8Array(`${headerB64}.${payloadB64}`)\n  const sig = b64urlToUint8Array(sigB64)\n  const ok = await crypto.subtle.verify('RSASSA-PKCS1-v1_5', key, sig, data)\n  if (!ok) throw new Error('invalid_signature')\n\n  // 5) 페이로드 파싱(검증 이후)\n  const payload: any = decodeJwtPayload(idToken) || {}\n  const now = Math.floor(Date.now() / 1000)\n\n  // iss\n  if (!ALLOWED_ISSUERS.includes(payload.iss)) throw new Error('invalid_issuer')\n\n  // aud\n  if (payload.aud !== expectedAud) throw new Error('aud_mismatch')\n\n  // nonce(선택적이지만 있으면 비교 권장)\n  if (expectedNonce && payload.nonce && payload.nonce !== expectedNonce) {\n    throw new Error('nonce_mismatch')\n  }\n\n  // exp/iat 시간 검증(오차 허용)\n  if (typeof payload.exp === 'number' && now > payload.exp + CLOCK_SKEW_SEC) {\n    throw new Error('token_expired')\n  }\n  if (typeof payload.iat === 'number' && payload.iat > now + CLOCK_SKEW_SEC) {\n    throw new Error('invalid_iat')\n  }\n\n  return payload\n}\n\nexport async function handleOAuth2Verify(request: Request, env: {\n  GOOGLE_CLIENT_ID: string;\n  GOOGLE_CLIENT_SECRET: string;\n  SESSION_TTL_DAYS: string;\n  COOKIE_SECRET: string;\n}, origin?: string) {\n  if (request.method !== 'POST') {\n    return Response.json({ error: 'method_not_allowed' }, { status: 405, headers: origin ? corsHeadersWithOrigin(origin) : undefined })\n  }\n\n  // zod 스키마\n  const schema = z.object({\n    provider: z.literal('google'),\n    idToken: z.string().min(10),\n    nonce: z.string().min(8) // 클라이언트가 보낸 nonce(토큰 내 nonce와 비교)\n  })\n\n  let body: unknown\n  try {\n    body = await request.json()\n  } catch {\n    return Response.json({ error: 'invalid_json' }, { status: 400, headers: origin ? corsHeadersWithOrigin(origin) : undefined })\n  }\n\n  const parsed = schema.safeParse(body)\n  if (!parsed.success) {\n    return Response.json({ error: parsed.error.message }, { status: 400, headers: origin ? corsHeadersWithOrigin(origin) : undefined })\n  }\n\n  const { idToken, nonce } = parsed.data\n\n  // 구글 ID 토큰 검증(서명/클레임)\n  let payload: any\n  try {\n    payload = await verifyGoogleIdJwt(idToken, env.GOOGLE_CLIENT_ID, nonce)\n  } catch (e: any) {\n    return Response.json({ error: e?.message || 'verify_failed' }, { status: 401, headers: origin ? corsHeadersWithOrigin(origin) : undefined })\n  }\n\n  // 사용자 프로필 구성(필요시 확장)\n  const user = {\n    sub: payload.sub,\n    email: payload.email,\n    email_verified: payload.email_verified,\n    name: payload.name,\n    picture: payload.picture\n  }\n\n  // 세션 쿠키 발급 (SameSite=Lax로 CSRF 완화)\n  const sessionCookie = await makeSessionCookie(env, user, request, { sameSite: 'Lax' })\n\n  const headers = headersWithCookies(\n    { 'content-type': 'application/json; charset=UTF-8' },\n    [sessionCookie]\n  )\n  for (const [k, v] of Object.entries((origin ? corsHeadersWithOrigin(origin) : {}))) headers.set(k, v)\n\n  return new Response(JSON.stringify({ ok: true, user }, null, 2), {\n    status: 200,\n    headers,\n  })\n}\n"]}