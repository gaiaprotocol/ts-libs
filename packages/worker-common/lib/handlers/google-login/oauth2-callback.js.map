{"version":3,"file":"oauth2-callback.js","sourceRoot":"","sources":["../../../src/handlers/google-login/oauth2-callback.ts"],"names":[],"mappings":"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","sourcesContent":["import { z } from 'zod';\nimport { decodeJwtPayload, exchangeCodeForTokens } from './google';\nimport { headersWithCookies, hmacVerify, makeCookie, makeSessionCookie, parseCookies } from './utils';\n\nexport async function handleOAuth2Callback(request: Request, env: {\n  COOKIE_SECRET: string;\n  GOOGLE_CLIENT_ID: string;\n  GOOGLE_CLIENT_SECRET: string;\n  GOOGLE_REDIRECT_URI: string;\n  SESSION_TTL_DAYS: string;\n}) {\n  const url = new URL(request.url)\n  const schema = z.object({ code: z.string().min(1), state: z.string().min(1) })\n  const params = { code: url.searchParams.get('code'), state: url.searchParams.get('state') }\n  const parsed = schema.safeParse(params)\n  if (!parsed.success) return Response.json({ error: parsed.error.message }, { status: 400 })\n\n  // temp cookie 검증\n  const cookies = parseCookies(request.headers.get('Cookie'))\n  const raw = cookies['oauth_tmp']\n  if (!raw) return Response.json({ error: 'invalid_state' }, { status: 400 })\n  const [payload, sig] = raw.split('.')\n  const ok = await hmacVerify(env, payload, sig).catch(() => false)\n  if (!ok) return Response.json({ error: 'invalid_signature' }, { status: 400 })\n  const tmp = JSON.parse(atob(payload.replace(/-/g, '+').replace(/_/g, '/')))\n  if (tmp.state !== parsed.data.state) {\n    return Response.json({ error: 'state_mismatch' }, { status: 400 })\n  }\n\n  // 토큰 교환\n  const token = await exchangeCodeForTokens({\n    code: parsed.data.code,\n    clientId: env.GOOGLE_CLIENT_ID,\n    clientSecret: env.GOOGLE_CLIENT_SECRET,\n    redirectUri: env.GOOGLE_REDIRECT_URI,\n    codeVerifier: tmp.code_verifier,\n  }).catch((e: any) => ({ error: e?.message || 'exchange_failed' }))\n  if ((token as any).error) {\n    return Response.json({ error: (token as any).error }, { status: 400 })\n  }\n\n  const id = decodeJwtPayload((token as any).id_token) || {}\n  const user = { sub: id.sub, email: id.email, email_verified: id.email_verified, name: id.name, picture: id.picture }\n\n  // 크로스사이트 방지: SameSite=Lax 유지(필요 시 'Strict'로 변경 가능)\n  const sessionCookie = await makeSessionCookie(env, user, request, { sameSite: 'Lax' })\n  const clearTmp = makeCookie('oauth_tmp', '', { maxAge: 0 })\n\n  const wantsJson = url.searchParams.get('format') === 'json'\n  if (wantsJson) {\n    return new Response(JSON.stringify({ ok: true, user }, null, 2), {\n      status: 200,\n      headers: headersWithCookies(\n        { 'content-type': 'application/json; charset=UTF-8' },\n        [sessionCookie, clearTmp]\n      ),\n    })\n  }\n\n  return new Response(null, {\n    status: 302,\n    headers: headersWithCookies({ Location: '/' }, [sessionCookie, clearTmp]),\n  })\n}\n"]}