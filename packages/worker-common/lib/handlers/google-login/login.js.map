{"version":3,"file":"login.js","sourceRoot":"","sources":["../../../src/handlers/google-login/login.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAA;AAClD,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,SAAS,CAAA;AAE9C,SAAS,UAAU,CAAC,GAAQ;IAC1B,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAA;AAC9F,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,iBAAiB,CAAC,QAAiB,EAAE,GAI1D;IACC,MAAM,EAAE,KAAK,EAAE,YAAY,EAAE,SAAS,EAAE,GAAG,MAAM,QAAQ,EAAE,CAAA;IAE3D,2CAA2C;IAC3C,MAAM,OAAO,GAAG,UAAU,CAAC,EAAE,KAAK,EAAE,aAAa,EAAE,YAAY,EAAE,CAAC,CAAA;IAClE,MAAM,GAAG,GAAG,MAAM,QAAQ,CAAC,GAAG,EAAE,OAAO,CAAC,CAAA;IACxC,MAAM,SAAS,GAAG,UAAU,CAAC,WAAW,EAAE,GAAG,OAAO,IAAI,GAAG,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAA;IAE/E,MAAM,UAAU,GAAG,aAAa,CAAC;QAC/B,QAAQ,EAAE,GAAG,CAAC,gBAAgB;QAC9B,WAAW,EAAE,GAAG,CAAC,mBAAmB;QACpC,KAAK,EAAE,sBAAsB,EAAE,sCAAsC;QACrE,aAAa,EAAE,SAAS;QACxB,KAAK;QACL,gCAAgC;QAChC,yBAAyB;QACzB,qBAAqB;KACtB,CAAC,CAAA;IAEF,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,CAAA;IACrD,OAAO,CAAC,MAAM,CAAC,YAAY,EAAE,SAAS,CAAC,CAAA;IACvC,OAAO,IAAI,QAAQ,CAAC,IAAI,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC,CAAA;AACrD,CAAC","sourcesContent":["import { googleAuthURL, makePkce } from './google'\nimport { hmacSign, makeCookie } from './utils'\n\nfunction b64UrlJson(obj: any) {\n  return btoa(JSON.stringify(obj)).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/g, '')\n}\n\nexport async function handleGoogleLogin(_request: Request, env: {\n  GOOGLE_CLIENT_ID: string\n  GOOGLE_REDIRECT_URI: string\n  COOKIE_SECRET: string\n}) {\n  const { state, codeVerifier, challenge } = await makePkce()\n\n  // state + code_verifier를 무결성 서명과 함께 쿠키에 저장\n  const payload = b64UrlJson({ state, code_verifier: codeVerifier })\n  const sig = await hmacSign(env, payload)\n  const tmpCookie = makeCookie('oauth_tmp', `${payload}.${sig}`, { maxAge: 600 })\n\n  const redirectTo = googleAuthURL({\n    clientId: env.GOOGLE_CLIENT_ID,\n    redirectUri: env.GOOGLE_REDIRECT_URI,\n    scope: 'openid email profile', // 필요 시 'openid' 또는 'openid email'로 축소\n    codeChallenge: challenge,\n    state,\n    // accessType / prompt는 필요 시만 추가\n    // accessType: 'offline',\n    // prompt: 'consent',\n  })\n\n  const headers = new Headers({ Location: redirectTo })\n  headers.append('Set-Cookie', tmpCookie)\n  return new Response(null, { status: 302, headers })\n}\n"]}