{"version":3,"file":"me.js","sourceRoot":"","sources":["../../../src/handlers/google-login/me.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,MAAM,SAAS,CAAC;AAEtC,MAAM,CAAC,KAAK,UAAU,cAAc,CAAC,OAAgB,EAAE,GAGtD;IACC,IAAI,CAAC;QACH,MAAM,EAAE,GAAG,MAAM,WAAW,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;QAC3C,IAAI,CAAC,EAAE,EAAE,GAAG;YAAE,OAAO,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,eAAe,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;QAEhF,MAAM,GAAG,GAAG,MAAM,GAAG,CAAC,EAAE,CAAC,OAAO,CAC9B;;4BAEsB,CACvB;aACE,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC;aACZ,KAAK,EAOF,CAAC;QAEP,OAAO,QAAQ,CAAC,IAAI,CAClB;YACE,EAAE,EAAE,IAAI;YACR,IAAI,EAAE;gBACJ,GAAG,EAAE,EAAE,CAAC,GAAG;gBACX,KAAK,EAAE,EAAE,CAAC,KAAK,IAAI,IAAI;gBACvB,IAAI,EAAE,EAAE,CAAC,IAAI,IAAI,IAAI;gBACrB,OAAO,EAAE,EAAE,CAAC,OAAO,IAAI,IAAI;aAC5B;YACD,cAAc,EAAE,GAAG,EAAE,cAAc,IAAI,IAAI;YAC3C,KAAK,EAAE,GAAG,EAAE,KAAK,IAAI,IAAI;YACzB,SAAS,EAAE,GAAG,EAAE,SAAS,IAAI,IAAI;YACjC,6CAA6C;YAC7C,OAAO,EAAE;gBACP,GAAG,EAAE,EAAE,CAAC,GAAG;gBACX,KAAK,EAAE,GAAG,EAAE,KAAK,IAAI,EAAE,CAAC,KAAK,IAAI,IAAI;gBACrC,IAAI,EAAE,GAAG,EAAE,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI;gBAClC,OAAO,EAAE,GAAG,EAAE,OAAO,IAAI,EAAE,CAAC,OAAO,IAAI,IAAI;aAC5C;SACF,EACD,EAAE,MAAM,EAAE,GAAG,EAAE,CAChB,CAAC;IACJ,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACnB,OAAO,QAAQ,CAAC,IAAI,CAClB,EAAE,KAAK,EAAE,GAAG,YAAY,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,EAC3D,EAAE,MAAM,EAAE,GAAG,EAAE,CAChB,CAAC;IACJ,CAAC;AACH,CAAC","sourcesContent":["import { D1Database } from '@cloudflare/workers-types';\nimport { readSession } from './utils';\n\nexport async function handleGoogleMe(request: Request, env: {\n  DB: D1Database;\n  COOKIE_SECRET: string;\n}) {\n  try {\n    const me = await readSession(env, request);\n    if (!me?.sub) return Response.json({ error: 'not_logged_in' }, { status: 401 });\n\n    const row = await env.DB.prepare(\n      `SELECT wallet_address, token, linked_at, email, name, picture\n       FROM google_web3_accounts\n       WHERE google_sub = ?`\n    )\n      .bind(me.sub)\n      .first<{\n        wallet_address: string | null;\n        token: string | null;\n        linked_at: number | null;\n        email: string | null;\n        name: string | null;\n        picture: string | null;\n      }>();\n\n    return Response.json(\n      {\n        ok: true,\n        user: {\n          sub: me.sub,\n          email: me.email ?? null,\n          name: me.name ?? null,\n          picture: me.picture ?? null,\n        },\n        wallet_address: row?.wallet_address ?? null,\n        token: row?.token ?? null,\n        linked_at: row?.linked_at ?? null,\n        // 저장된 값이 있으면 DB 기준으로, 없으면 세션 기준으로 profile 노출\n        profile: {\n          sub: me.sub,\n          email: row?.email ?? me.email ?? null,\n          name: row?.name ?? me.name ?? null,\n          picture: row?.picture ?? me.picture ?? null,\n        },\n      },\n      { status: 200 },\n    );\n  } catch (err) {\n    console.error(err);\n    return Response.json(\n      { error: err instanceof Error ? err.message : String(err) },\n      { status: 500 },\n    );\n  }\n}\n"]}