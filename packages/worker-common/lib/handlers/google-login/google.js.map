{"version":3,"file":"google.js","sourceRoot":"","sources":["../../../src/handlers/google-login/google.ts"],"names":[],"mappings":"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","sourcesContent":["import { b64urlEncode, sha256 } from './utils'\n\nexport function googleAuthURL({ clientId, redirectUri, scope, codeChallenge, state, accessType, prompt }: {\n  clientId: string\n  redirectUri: string\n  scope: string\n  codeChallenge: string\n  state: string\n  accessType?: 'online' | 'offline'\n  prompt?: 'consent' | 'none' | 'select_account' | 'consent select_account'\n}) {\n  const auth = new URL('https://accounts.google.com/o/oauth2/v2/auth')\n  auth.searchParams.set('response_type', 'code')\n  auth.searchParams.set('client_id', clientId)\n  auth.searchParams.set('redirect_uri', redirectUri)\n  auth.searchParams.set('scope', scope)\n  auth.searchParams.set('code_challenge', codeChallenge)\n  auth.searchParams.set('code_challenge_method', 'S256')\n  auth.searchParams.set('state', state)\n  if (accessType) auth.searchParams.set('access_type', accessType)\n  if (prompt) auth.searchParams.set('prompt', prompt)\n  return auth.toString()\n}\n\nexport async function exchangeCodeForTokens({ code, clientId, clientSecret, redirectUri, codeVerifier }: {\n  code: string\n  clientId: string\n  clientSecret?: string\n  redirectUri: string\n  codeVerifier: string\n}) {\n  const body = new URLSearchParams({\n    code,\n    client_id: clientId,\n    redirect_uri: redirectUri,\n    grant_type: 'authorization_code',\n    code_verifier: codeVerifier,\n  })\n  if (clientSecret) body.set('client_secret', clientSecret)\n\n  const resp = await fetch('https://oauth2.googleapis.com/token', {\n    method: 'POST',\n    headers: { 'content-type': 'application/x-www-form-urlencoded' },\n    body,\n  })\n  if (!resp.ok) throw new Error(`token exchange failed: ${resp.status}`)\n  return await resp.json()\n}\n\nexport function decodeJwtPayload(idToken?: string) {\n  if (!idToken) return null\n  const [, p] = idToken.split('.')\n  if (!p) return null\n  const json = atob(p.replace(/-/g, '+').replace(/_/g, '/'))\n  return JSON.parse(json)\n}\n\nexport async function makePkce() {\n  const state = b64urlEncode(crypto.getRandomValues(new Uint8Array(16)))\n  const codeVerifier = b64urlEncode(crypto.getRandomValues(new Uint8Array(32)))\n  const challenge = b64urlEncode(await sha256(codeVerifier))\n  return { state, codeVerifier, challenge }\n}\n"]}