{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../src/handlers/google-login/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { z } from 'zod'\n\n// ---- base64url helpers ----\nexport function b64urlEncode(input: string | ArrayBuffer | Uint8Array): string {\n  let bytes: Uint8Array\n  if (typeof input === 'string') bytes = new TextEncoder().encode(input)\n  else if (input instanceof ArrayBuffer) bytes = new Uint8Array(input)\n  else bytes = input\n  let bin = ''\n  for (let i = 0; i < bytes.length; i++) bin += String.fromCharCode(bytes[i])\n  const b64 = btoa(bin)\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/g, '')\n}\n\nexport function b64urlToBytes(b64url: string): Uint8Array {\n  let b64 = b64url.replace(/-/g, '+').replace(/_/g, '/')\n  const pad = b64.length % 4\n  if (pad) b64 += '='.repeat(4 - pad)\n  const bin = atob(b64)\n  return Uint8Array.from(bin, (c) => c.charCodeAt(0))\n}\n\nexport function b64urlDecodeToString(b64url: string): string {\n  return new TextDecoder().decode(b64urlToBytes(b64url))\n}\n\n// ---- crypto helpers ----\nexport async function sha256(input: string | Uint8Array) {\n  const enc = new TextEncoder()\n  const data = input instanceof Uint8Array ? input : enc.encode(input)\n  return await crypto.subtle.digest('SHA-256', data)\n}\n\nasync function importHmacKey(secret: string) {\n  const enc = new TextEncoder()\n  return await crypto.subtle.importKey('raw', enc.encode(secret), { name: 'HMAC', hash: 'SHA-256' }, false, ['sign', 'verify'])\n}\n\nexport async function hmacSign(env: { COOKIE_SECRET: string }, data: string) {\n  const key = await importHmacKey(env.COOKIE_SECRET)\n  const sig = await crypto.subtle.sign('HMAC', key, new TextEncoder().encode(data))\n  return b64urlEncode(sig)\n}\n\nexport async function hmacVerify(env: { COOKIE_SECRET: string }, data: string, sigB64Url: string) {\n  const key = await importHmacKey(env.COOKIE_SECRET)\n  const sig = b64urlToBytes(sigB64Url)\n  return await crypto.subtle.verify('HMAC', key, sig, new TextEncoder().encode(data))\n}\n\n// ---- cookies ----\nexport function parseCookies(header?: string | null) {\n  const out: Record<string, string> = {}\n  if (!header) return out\n  for (const part of header.split(';')) {\n    const [k, v] = part.trim().split('=')\n    if (!k) continue\n    out[k] = decodeURIComponent(v || '')\n  }\n  return out\n}\n\nexport function makeCookie(\n  name: string,\n  value: string,\n  opts: { httpOnly?: boolean; path?: string; secure?: boolean; sameSite?: 'Lax' | 'Strict' | 'None'; maxAge?: number; domain?: string } = {}\n) {\n  const { httpOnly = true, path = '/', secure = true, sameSite = 'Lax', maxAge, domain } = opts\n  let cookie = `${name}=${encodeURIComponent(value)}; Path=${path}; SameSite=${sameSite}`\n  if (domain) cookie += `; Domain=${domain}`\n  if (secure) cookie += '; Secure'\n  if (httpOnly) cookie += '; HttpOnly'\n  if (maxAge != null) cookie += `; Max-Age=${maxAge}`\n  return cookie\n}\n\nexport function headersWithCookies(base?: HeadersInit, cookies: string[] = []) {\n  const h = new Headers(base)\n  for (const c of cookies) h.append('Set-Cookie', c)\n  return h\n}\n\n// ---- session ----\nexport async function makeSessionCookie(\n  env: { SESSION_TTL_DAYS: string; COOKIE_SECRET: string },\n  user: any,\n  request: Request,\n  opts?: { sameSite?: 'Lax' | 'None'; domain?: string },\n) {\n  const ttlDays = Number(env.SESSION_TTL_DAYS || 7)\n  const exp = Math.floor(Date.now() / 1000) + ttlDays * 24 * 60 * 60\n  const payload = b64urlEncode(JSON.stringify({ exp, user }))\n  const sig = await hmacSign(env, payload)\n  const url = new URL(request.url)\n  const secure = url.protocol === 'https:'\n  return makeCookie('session', `${payload}.${sig}`, {\n    maxAge: ttlDays * 24 * 60 * 60,\n    secure,\n    sameSite: opts?.sameSite ?? 'Lax',\n    domain: opts?.domain,\n  })\n}\n\nexport async function readSession(env: { COOKIE_SECRET: string }, request: Request) {\n  const cookies = parseCookies(request.headers.get('Cookie'))\n  const raw = cookies['session']\n  if (!raw) return null\n  const [payload, sig] = raw.split('.')\n  if (!payload || !sig) return null\n  const ok = await hmacVerify(env, payload, sig).catch(() => false)\n  if (!ok) return null\n  let json: string\n  try {\n    json = b64urlDecodeToString(payload)\n  } catch {\n    return null\n  }\n  const data = JSON.parse(json)\n  if (!data.exp || data.exp < Math.floor(Date.now() / 1000)) return null\n  return data.user\n}\n\nexport function clearSessionCookie() {\n  return makeCookie('session', '', { maxAge: 0 })\n}\n\nexport function zParse<T>(schema: z.ZodType<T>, input: unknown) {\n  const parsed = schema.safeParse(input)\n  if (!parsed.success) throw new Error(parsed.error.message)\n  return parsed.data\n}\n"]}