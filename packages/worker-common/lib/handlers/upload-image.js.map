{"version":3,"file":"upload-image.js","sourceRoot":"","sources":["../../src/handlers/upload-image.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AACxB,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAEhD,MAAM,aAAa,GAAG,gCAAgC,CAAC;AAEvD,KAAK,UAAU,iBAAiB,CAAC,OAAgB,EAAE,GAA8B;IAC/E,IAAI,CAAC;QACH,MAAM,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;QAC9D,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,qBAAqB,CAAC,EAAE,CAAC;YACjD,OAAO,YAAY,CAAC,EAAE,KAAK,EAAE,sBAAsB,EAAE,EAAE,GAAG,CAAC,CAAC;QAC9D,CAAC;QAED,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,QAAQ,EAAE,CAAC;QAC1C,MAAM,SAAS,GAAG,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAExC,IAAI,CAAC,CAAC,SAAS,YAAY,IAAI,CAAC,EAAE,CAAC;YACjC,OAAO,YAAY,CAAC,EAAE,KAAK,EAAE,oBAAoB,EAAE,EAAE,GAAG,CAAC,CAAC;QAC5D,CAAC;QAED,MAAM;QACN,MAAM,cAAc,GAAG,MAAM,KAAK,CAAC,GAAG,aAAa,QAAQ,GAAG,CAAC,aAAa,EAAE,EAAE;YAC9E,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,QAAQ;SACf,CAAC,CAAC;QAEH,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,CAAC;YACvB,MAAM,SAAS,GAAG,MAAM,cAAc,CAAC,IAAI,EAAE,CAAC;YAC9C,OAAO,YAAY,CAAC,EAAE,KAAK,EAAE,kBAAkB,SAAS,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;QACrE,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,cAAc,CAAC,IAAI,EAAE,CAAC;QAEzC,MAAM,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;YACtB,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC;gBACb,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE;gBACZ,KAAK,EAAE,CAAC,CAAC,MAAM,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,QAAQ,EAAE;aAC7C,CAAC;SACH,CAAC,CAAC;QAEH,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAElC,OAAO,YAAY,CAAC;YAClB,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG;YACzB,YAAY,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,IAAI,IAAI;SAC7C,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,OAAO,YAAY,CAAC,EAAE,KAAK,EAAE,GAAG,YAAY,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;IACxF,CAAC;AACH,CAAC;AAED,OAAO,EAAE,iBAAiB,EAAE,CAAC","sourcesContent":["import { z } from 'zod';\nimport { jsonWithCors } from '../services/cors';\n\nconst IMGBB_API_URL = 'https://api.imgbb.com/1/upload';\n\nasync function handleUploadImage(request: Request, env: { IMGBB_API_KEY: string }): Promise<Response> {\n  try {\n    const contentType = request.headers.get('content-type') || '';\n    if (!contentType.includes('multipart/form-data')) {\n      return jsonWithCors({ error: 'Invalid content-type' }, 400);\n    }\n\n    const formData = await request.formData();\n    const imageFile = formData.get('image');\n\n    if (!(imageFile instanceof File)) {\n      return jsonWithCors({ error: 'Invalid image file' }, 400);\n    }\n\n    // 업로드\n    const uploadResponse = await fetch(`${IMGBB_API_URL}?key=${env.IMGBB_API_KEY}`, {\n      method: 'POST',\n      body: formData,\n    });\n\n    if (!uploadResponse.ok) {\n      const errorText = await uploadResponse.text();\n      return jsonWithCors({ error: `Upload failed: ${errorText}` }, 500);\n    }\n\n    const data = await uploadResponse.json();\n\n    const schema = z.object({\n      data: z.object({\n        url: z.url(),\n        thumb: z.object({ url: z.url() }).optional(),\n      }),\n    });\n\n    const parsed = schema.parse(data);\n\n    return jsonWithCors({\n      imageUrl: parsed.data.url,\n      thumbnailUrl: parsed.data.thumb?.url || null,\n    });\n  } catch (err) {\n    return jsonWithCors({ error: err instanceof Error ? err.message : String(err) }, 500);\n  }\n}\n\nexport { handleUploadImage };\n"]}