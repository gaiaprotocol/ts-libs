{"version":3,"file":"login.js","sourceRoot":"","sources":["../../src/handlers/login.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAClC,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AACxB,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAChD,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAChD,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAUhD,MAAM,CAAC,KAAK,UAAU,WAAW,CAAC,OAAgB,EAAE,OAAe,EAAE,GAAQ;IAC3E,MAAM,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;QACtB,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,qBAAqB,EAAE,0BAA0B,CAAC;QAC5E,SAAS,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,kBAAkB,EAAE,mBAAmB,CAAC;KACrE,CAAC,CAAC;IAEH,MAAM,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;IAElE,MAAM,iBAAiB,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC;IAE9C,MAAM,KAAK,GAAG,MAAM,YAAY,CAC9B,iBAAiB,EACjB,SAA0B,EAC1B,OAAO,EACP,GAAG,CACJ,CAAC;IAEF,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,OAAO,YAAY,CAAC,4BAA4B,EAAE,GAAG,CAAC,CAAC;IACzD,CAAC;IAED,MAAM,KAAK,GAAG,MAAM,aAAa,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;IAChD,OAAO,YAAY,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;AACjC,CAAC","sourcesContent":["import { KVNamespace } from '@cloudflare/workers-types';\nimport { getAddress } from 'viem';\nimport { z } from 'zod';\nimport { jsonWithCors } from '../services/cors';\nimport { generateToken } from '../services/jwt';\nimport { validateSiwe } from '../services/siwe';\n\ntype Env = {\n  ALLOWED_DOMAIN: string;\n  ALLOWED_URI: string;\n  MESSAGE_FOR_WALLET_LOGIN: string;\n  SIWE_NONCES: KVNamespace;\n  JWT_SECRET: string;\n};\n\nexport async function handleLogin(request: Request, chainId: number, env: Env) {\n  const schema = z.object({\n    address: z.string().regex(/^0x[a-fA-F0-9]{40}$/, 'Invalid Ethereum address'),\n    signature: z.string().regex(/^0x[a-fA-F0-9]+$/, 'Invalid signature'),\n  });\n\n  const { address, signature } = schema.parse(await request.json());\n\n  const normalizedAddress = getAddress(address);\n\n  const valid = await validateSiwe(\n    normalizedAddress,\n    signature as `0x${string}`,\n    chainId,\n    env\n  );\n\n  if (!valid) {\n    return jsonWithCors('Invalid signature or nonce', 401);\n  }\n\n  const token = await generateToken(address, env);\n  return jsonWithCors({ token });\n}\n"]}