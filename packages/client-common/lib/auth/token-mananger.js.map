{"version":3,"file":"token-mananger.js","sourceRoot":"","sources":["../../src/auth/token-mananger.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,wBAAwB,CAAC;AACtD,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAElC,MAAM,YAAa,SAAQ,YAGzB;IACS,SAAS,GAAG,OAAO,CAAC;IACpB,WAAW,GAAG,eAAe,CAAC;IAEvC,gBAAgB,KAAK,EAAE,CAAC,CAAC,CAAC;IAE1B,GAAG,CAAC,KAAa,EAAE,OAAsB;QACvC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC5C,MAAM,IAAI,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC;QACjC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;QAC7C,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IAC9B,CAAC;IAED,QAAQ;QACN,OAAO,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,SAAS,CAAC;IAC3D,CAAC;IAED,UAAU;QACR,OAAO,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAkB,IAAI,SAAS,CAAC;IAC9E,CAAC;IAED,KAAK;QACH,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACxC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC1C,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACzB,CAAC;IAED,GAAG;QACD,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;IAC3B,CAAC;IAED,aAAa,CAAC,cAA6B;QACzC,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAChC,OAAO,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,UAAU,CAAC,cAAc,CAAC,CAAC;IACrE,CAAC;CACF;AAED,MAAM,YAAY,GAAG,IAAI,YAAY,EAAE,CAAC;AAExC,OAAO,EAAE,YAAY,EAAE,CAAC","sourcesContent":["import { EventEmitter } from '@webtaku/event-emitter';\nimport { getAddress } from 'viem';\n\nclass TokenManager extends EventEmitter<{\n  signedIn: (address: string) => void;\n  signedOut: () => void;\n}> {\n  readonly TOKEN_KEY = 'token';\n  readonly ADDRESS_KEY = 'token_address';\n\n  constructor() { super(); }\n\n  set(token: string, address: `0x${string}`) {\n    localStorage.setItem(this.TOKEN_KEY, token);\n    const addr = getAddress(address);\n    localStorage.setItem(this.ADDRESS_KEY, addr);\n    this.emit('signedIn', addr);\n  }\n\n  getToken(): string | undefined {\n    return localStorage.getItem(this.TOKEN_KEY) ?? undefined;\n  }\n\n  getAddress(): `0x${string}` | undefined {\n    return localStorage.getItem(this.ADDRESS_KEY) as `0x${string}` ?? undefined;\n  }\n\n  clear() {\n    localStorage.removeItem(this.TOKEN_KEY);\n    localStorage.removeItem(this.ADDRESS_KEY);\n    this.emit('signedOut');\n  }\n\n  has(): boolean {\n    return !!this.getToken();\n  }\n\n  isMatchedWith(currentAddress: `0x${string}`): boolean {\n    const saved = this.getAddress();\n    return saved !== undefined && saved === getAddress(currentAddress);\n  }\n}\n\nconst tokenManager = new TokenManager();\n\nexport { tokenManager };\n"]}