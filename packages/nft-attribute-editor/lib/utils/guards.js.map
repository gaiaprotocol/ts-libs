{"version":3,"file":"guards.js","sourceRoot":"","sources":["../../src/utils/guards.ts"],"names":[],"mappings":"AAGA,MAAM,UAAU,iBAAiB,CAAC,CAAc;IAC9C,OAAO,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC;AAED,MAAM,UAAU,qBAAqB,CACnC,CAAc;IAEd,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;QACtB,OAAO,CAAC,KAAK,QAAQ;QACrB,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC;AAED,MAAM,UAAU,qBAAqB,CACnC,CAAc;IAEd,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;QACtB,OAAO,CAAC,KAAK,QAAQ;QACrB,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CACpB,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,QAAQ,IAAI,CAAC,IAAI,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAC7F,CAAC;AACN,CAAC;AAED,MAAM,UAAU,gBAAgB,CAC9B,CAAa;IAEb,OAAO,OAAO,CAAC,KAAK,QAAQ,IAAI,CAAC,IAAI,IAAI;QACvC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,QAAQ,CAAC,CAAC;AACvD,CAAC;AAED,MAAM,UAAU,oBAAoB,CAClC,CAAa;IAEb,OAAO,OAAO,CAAC,KAAK,QAAQ,IAAI,CAAC,IAAI,IAAI;QACvC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CACpB,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,QAAQ,IAAI,CAAC,IAAI,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,QAAQ,CAAC,CAC9F,CAAC;AACN,CAAC;AAED,MAAM,UAAU,oBAAoB,CAClC,CAAa;IAEb,OAAO,OAAO,CAAC,KAAK,QAAQ,IAAI,CAAC,IAAI,IAAI;QACvC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CACpB,GAAG,CAAC,EAAE,CAAC,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,IAAI,IAAI;YAC3C,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,CACtB,GAAG,CAAC,EAAE,CAAC,OAAO,GAAG,KAAK,QAAQ,IAAI,GAAG,IAAI,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,QAAQ,CAAC,CACtG,CACJ,CAAC;AACN,CAAC","sourcesContent":["import { KeyToFrame } from \"../types/frame\";\nimport { PartCategory, PartOptions } from \"../types/nft\";\n\nexport function isFlatPartOptions(p: PartOptions): p is PartCategory[] {\n  return Array.isArray(p);\n}\n\nexport function isOneLevelPartOptions(\n  p: PartOptions\n): p is Record<string, PartCategory[]> {\n  return !Array.isArray(p) &&\n    typeof p === 'object' &&\n    Object.values(p).every(v => Array.isArray(v));\n}\n\nexport function isTwoLevelPartOptions(\n  p: PartOptions\n): p is Record<string, Record<string, PartCategory[]>> {\n  return !Array.isArray(p) &&\n    typeof p === 'object' &&\n    Object.values(p).every(\n      v => typeof v === 'object' && v != null && Object.values(v).every(arr => Array.isArray(arr))\n    );\n}\n\nexport function isFlatKeyToFrame(\n  k: KeyToFrame\n): k is Record<string, string> {\n  return typeof k === 'object' && k != null &&\n    Object.values(k).every(v => typeof v === 'string');\n}\n\nexport function isOneLevelKeyToFrame(\n  k: KeyToFrame\n): k is Record<string, Record<string, string>> {\n  return typeof k === 'object' && k != null &&\n    Object.values(k).every(\n      v => typeof v === 'object' && v != null && Object.values(v).every(s => typeof s === 'string')\n    );\n}\n\nexport function isTwoLevelKeyToFrame(\n  k: KeyToFrame\n): k is Record<string, Record<string, Record<string, string>>> {\n  return typeof k === 'object' && k != null &&\n    Object.values(k).every(\n      lv1 => typeof lv1 === 'object' && lv1 != null &&\n        Object.values(lv1).every(\n          lv2 => typeof lv2 === 'object' && lv2 != null && Object.values(lv2).every(s => typeof s === 'string')\n        )\n    );\n}\n"]}