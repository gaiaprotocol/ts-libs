{"version":3,"file":"chat.js","sourceRoot":"","sources":["../../src/services/chat.ts"],"names":[],"mappings":"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","sourcesContent":["import { tokenManager } from '@gaiaprotocol/client-common';\nimport { Attachment, ChatMessage } from '../types/chat';\n\ndeclare const API_BASE_URI: string;\n\ntype InitPayload = { type: 'init'; messages: ChatMessage[] };\n\nclass ChatService extends EventTarget {\n  private roomId: string;\n  private socket: WebSocket | null = null;\n  private reconnectDelay = 3000;\n  private stopped = false;\n\n  constructor(roomId: string) {\n    super();\n    this.roomId = roomId;\n  }\n\n  /* -------------------------- public -------------------------- */\n  connect() {\n    this.#connectWS();\n  }\n\n  disconnect() {\n    this.stopped = true;\n    this.socket?.close();\n  }\n\n  async send(text: string, attachments: Attachment[] = [], localId: string): Promise<ChatMessage> {\n    const token = tokenManager.getToken();\n    const resp = await fetch(`${API_BASE_URI}/chat/${this.roomId}/send`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n      body: JSON.stringify({ text, attachments, localId }),\n    });\n\n    if (!resp.ok) {\n      const err = new Error(`Send failed ${resp.status}`);\n      this.dispatchEvent(new CustomEvent('error', { detail: err }));\n      throw err;\n    }\n\n    return resp.json() as Promise<ChatMessage>;\n  }\n\n  /* ---------------------- private helpers --------------------- */\n  #connectWS() {\n    if (this.stopped) return;\n\n    const token = tokenManager.getToken();\n    if (!token) {\n      this.dispatchEvent(new CustomEvent('error', { detail: new Error('No token') }));\n      return;\n    }\n\n    const wsUrl = new URL(\n      `${API_BASE_URI}/chat/${this.roomId}/stream`,\n      location.origin.replace(/^http/, 'ws'),\n    );\n    wsUrl.searchParams.set('token', token);\n\n    const socket = new WebSocket(wsUrl.toString());\n    this.socket = socket;\n\n    socket.addEventListener('open', () => {\n      this.reconnectDelay = 3000;\n    });\n\n    socket.addEventListener('message', (ev) => {\n      try {\n        const data = JSON.parse(ev.data) as InitPayload | ChatMessage;\n        if ('type' in data && data.type === 'init') {\n          // History batch from server\n          this.dispatchEvent(new CustomEvent('init', { detail: data.messages }));\n        } else {\n          this.dispatchEvent(new CustomEvent('message', { detail: data as ChatMessage }));\n        }\n      } catch (err) {\n        console.error('Invalid WS payload', ev.data);\n      }\n    });\n\n    socket.addEventListener('close', () => {\n      if (!this.stopped) this.#scheduleReconnect();\n    });\n\n    socket.addEventListener('error', (e) => {\n      this.dispatchEvent(new CustomEvent('error', { detail: e }));\n      socket.close();\n    });\n  }\n\n  #scheduleReconnect() {\n    if (this.stopped) return;\n    setTimeout(() => {\n      this.reconnectDelay = Math.min(this.reconnectDelay * 1.5, 60000);\n      this.#connectWS();\n    }, this.reconnectDelay);\n  }\n}\n\nexport { ChatMessage, ChatService };"]}