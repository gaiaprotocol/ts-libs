{"version":3,"file":"chat-profile.js","sourceRoot":"","sources":["../../src/services/chat-profile.ts"],"names":[],"mappings":"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","sourcesContent":["import { tokenManager } from '@gaiaprotocol/client-common';\nimport { getAddress } from 'viem';\n\n/** 채팅에 사용되는 프로필 구조 */\nexport type ChatProfile = {\n  nickname?: string | null;\n  profileImage?: string | null;\n  fetchedAt: number;\n};\n\ntype ChatProfileBatchFetcher = (\n  accounts: (`0x${string}`)[]\n) => Promise<Record<`0x${string}`, { nickname?: string | null; profileImage?: string | null } | null>>;\n\nconst TTL = 10 * 60 * 1000; // 10분\n\nclass ChatProfileService extends EventTarget {\n  #cache = new Map<string, ChatProfile>();\n  #inflight = new Set<string>();\n  #fetchFn: ChatProfileBatchFetcher | null = null;\n\n  init(fetchFn: ChatProfileBatchFetcher) {\n    this.#fetchFn = fetchFn;\n  }\n\n  clear() {\n    this.#cache.clear();\n    this.#inflight.clear();\n  }\n\n  async preload(accounts: string[]) {\n    const toFetch = accounts\n      .map(a => getAddress(a))\n      .filter(a => this.#needsRefresh(a));\n    if (toFetch.length) await this.#fetchBatch(toFetch);\n  }\n\n  async resolve(account: string): Promise<ChatProfile | undefined> {\n    const addr = getAddress(account);\n    if (this.#needsRefresh(addr)) await this.#fetchBatch([addr]);\n    return this.#cache.get(addr);\n  }\n\n  getCached(account: string): ChatProfile | undefined {\n    return this.#cache.get(getAddress(account));\n  }\n\n  setProfile(account: string, nickname?: string, profileImage?: string) {\n    const addr = getAddress(account);\n    const prev = this.#cache.get(addr);\n\n    this.#cache.set(addr, {\n      nickname,\n      profileImage,\n      fetchedAt: Date.now()\n    });\n\n    this.#emitIfChanged(addr, prev, { nickname, profileImage });\n  }\n\n  #needsRefresh(addr: string) {\n    const entry = this.#cache.get(getAddress(addr));\n    return !entry || Date.now() - entry.fetchedAt > TTL;\n  }\n\n  async #fetchBatch(addresses: string[]) {\n    if (!this.#fetchFn) throw new Error('chatProfileService not initialized with fetch function');\n\n    const targets = addresses.filter(a => {\n      if (this.#inflight.has(a)) return false;\n      if (!this.#needsRefresh(a)) return false;\n      return true;\n    });\n\n    if (!targets.length) return;\n\n    targets.forEach(a => this.#inflight.add(a));\n\n    try {\n      const results = await this.#fetchFn(targets as `0x${string}`[]);\n\n      for (const addr of targets) {\n        const profile = results[getAddress(addr)] ?? null;\n        const prev = this.#cache.get(addr);\n\n        this.#cache.set(addr, {\n          nickname: profile?.nickname ?? null,\n          profileImage: profile?.profileImage ?? null,\n          fetchedAt: Date.now()\n        });\n\n        this.#emitIfChanged(addr, prev, profile);\n      }\n    } finally {\n      targets.forEach(a => this.#inflight.delete(a));\n    }\n  }\n\n  #emitIfChanged(\n    addr: string,\n    prev?: ChatProfile,\n    next?: { nickname?: string | null; profileImage?: string | null } | null\n  ) {\n    if (\n      prev?.nickname !== next?.nickname ||\n      prev?.profileImage !== next?.profileImage\n    ) {\n      this.dispatchEvent(\n        new CustomEvent('chatprofilechange', { detail: { account: addr, profile: next } })\n      );\n      if (addr === tokenManager.getAddress()) {\n        this.dispatchEvent(new Event('mychatprofilechange'));\n      }\n    }\n  }\n}\n\nexport const chatProfileService = new ChatProfileService();\n"]}