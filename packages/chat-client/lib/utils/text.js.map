{"version":3,"file":"text.js","sourceRoot":"","sources":["../../src/utils/text.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,EAAE,EAAE,MAAM,aAAa,CAAC;AAEjC;;GAEG;AACH,MAAM,UAAU,kBAAkB,CAAC,IAAY;IAC7C,MAAM,IAAI,GAAG,QAAQ,CAAC,sBAAsB,EAAE,CAAC;IAC/C,MAAM,QAAQ,GAAG,wBAAwB,CAAC;IAE1C,IAAI,SAAS,GAAG,CAAC,CAAC;IAClB,IAAI,KAAK,CAAC;IAEV,OAAO,CAAC,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;QAC9C,MAAM,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC;QACxB,MAAM,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QAErB,IAAI,KAAK,GAAG,SAAS,EAAE,CAAC;YACtB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;QACrE,CAAC;QAED,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE;YAChB,IAAI,EAAE,GAAG;YACT,MAAM,EAAE,QAAQ;YAChB,GAAG,EAAE,qBAAqB;SAC3B,EAAE,GAAG,CAAC,CAAC;QACR,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAC5B,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAEf,SAAS,GAAG,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC;IACjC,CAAC;IAED,IAAI,SAAS,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QAC5B,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IAC9D,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC","sourcesContent":["import { el } from '@webtaku/el';\n\n/**\n * 문자열에서 URL을 자동으로 링크로 변환한 DocumentFragment 반환\n */\nexport function parseTextWithLinks(text: string): DocumentFragment {\n  const frag = document.createDocumentFragment();\n  const urlRegex = /((https?:\\/\\/)[^\\s]+)/g;\n\n  let lastIndex = 0;\n  let match;\n\n  while ((match = urlRegex.exec(text)) !== null) {\n    const { index } = match;\n    const url = match[0];\n\n    if (index > lastIndex) {\n      frag.append(document.createTextNode(text.slice(lastIndex, index)));\n    }\n\n    const a = el('a', {\n      href: url,\n      target: '_blank',\n      rel: 'noopener noreferrer'\n    }, url);\n    a.classList.add('msg-link');\n    frag.append(a);\n\n    lastIndex = index + url.length;\n  }\n\n  if (lastIndex < text.length) {\n    frag.append(document.createTextNode(text.slice(lastIndex)));\n  }\n\n  return frag;\n}\n"]}