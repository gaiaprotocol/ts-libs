{"version":3,"file":"god-mode-check.js","sourceRoot":"","sources":["../../src/handlers/god-mode-check.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAA;AACvB,OAAO,EAAE,YAAY,EAAE,MAAM,sBAAsB,CAAA;AAEnD,MAAM,CAAC,KAAK,UAAU,kBAAkB,CAAC,OAAgB;IACvD,MAAM,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;QACtB,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,qBAAqB,EAAE,0BAA0B,CAAC;KAC7E,CAAC,CAAA;IAEF,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC,CAAA;IAEtD,MAAM,OAAO,GAAG,MAAM,YAAY,CAAC,OAAO,CAAC,CAAA;IAE3C,OAAO,QAAQ,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,CAAC,CAAA;AACnC,CAAC","sourcesContent":["import { z } from 'zod'\nimport { checkGodMode } from '../services/god-mode'\n\nexport async function handleGodModeCheck(request: Request): Promise<Response> {\n  const schema = z.object({\n    address: z.string().regex(/^0x[a-fA-F0-9]{40}$/, 'Invalid Ethereum address'),\n  })\n\n  const { address } = schema.parse(await request.json())\n\n  const godMode = await checkGodMode(address)\n\n  return Response.json({ godMode })\n}\n"]}