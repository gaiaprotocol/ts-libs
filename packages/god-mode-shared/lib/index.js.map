{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,YAAY,MAAM,wCAAwC,CAAC,SAAS,IAAI,EAAE,MAAM,EAAE,CAAC;AAC1F,OAAO,cAAc,MAAM,0CAA0C,CAAC,SAAS,IAAI,EAAE,MAAM,EAAE,CAAC;AAC9F,OAAO,aAAa,MAAM,yCAAyC,CAAC,SAAS,IAAI,EAAE,MAAM,EAAE,CAAC;AAC5F,OAAO,eAAe,MAAM,2CAA2C,CAAC,SAAS,IAAI,EAAE,MAAM,EAAE,CAAC;AAChG,OAAO,aAAa,MAAM,yCAAyC,CAAC,SAAS,IAAI,EAAE,MAAM,EAAE,CAAC;AAC5F,OAAO,eAAe,MAAM,2CAA2C,CAAC,SAAS,IAAI,EAAE,MAAM,EAAE,CAAC;AAKhG,MAAM,SAAS,GAA4D;IACzE,KAAK,EAAE,EAAE,GAAG,EAAE,aAAa,EAAE,KAAK,EAAE,eAAe,EAAE;IACrD,IAAI,EAAE,EAAE,GAAG,EAAE,YAAY,EAAE,KAAK,EAAE,cAAc,EAAE;IAClD,KAAK,EAAE,EAAE,GAAG,EAAE,aAAa,EAAE,KAAK,EAAE,eAAe,EAAE;CAC7C,CAAC;AA8BX,SAAS,aAAa,CAAC,IAAiB,EAAE,MAAkB;IAC1D,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC;AACjC,CAAC;AAED,SAAS,eAAe,CAAC,IAAc,EAAE,QAAqB;IAC5D,IAAI,CAAC,IAAI,CAAC,SAAS;QAAE,OAAO,IAAI,CAAC;IAEjC,IAAI,UAA8B,CAAC;IACnC,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,KAAK,MAAM;QAAE,UAAU,GAAG,QAAQ,CAAC,IAAI,CAAC;SAC1D,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,KAAK,QAAQ;QAAE,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;;QACnE,UAAU,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IAEtD,IAAI,CAAC,UAAU;QAAE,OAAO,KAAK,CAAC;IAC9B,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;AACpD,CAAC;AAED,SAAS,4BAA4B,CACnC,QAAsB,EACtB,QAAqB;IAErB,OAAO,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,eAAe,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;AAC1E,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,QAAqB;IACpD,MAAM,UAAU,GAAG,aAAa,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC;IACjE,MAAM,aAAa,GAAqC,EAAE,CAAC;IAE3D,KAAK,MAAM,QAAQ,IAAI,UAAU,EAAE,CAAC;QAClC,MAAM,cAAc,GAAG,4BAA4B,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACxE,MAAM,gBAAgB,GAAG,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACvD,MAAM,YAAY,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAChD,IAAI,CAAC,IAAI,KAAK,gBAAgB,CAC/B,CAAC;QACF,IAAI,YAAY;YAAE,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC;IAChE,CAAC;IAED,OAAO,aAAa,CAAC;AACvB,CAAC","sourcesContent":["import fireManParts from '../src/parts-jsons/fire-man-parts.json' assert { type: 'json' };\nimport fireWomanParts from '../src/parts-jsons/fire-woman-parts.json' assert { type: 'json' };\nimport stoneManParts from '../src/parts-jsons/stone-man-parts.json' assert { type: 'json' };\nimport stoneWomanParts from '../src/parts-jsons/stone-woman-parts.json' assert { type: 'json' };\nimport waterManParts from '../src/parts-jsons/water-man-parts.json' assert { type: 'json' };\nimport waterWomanParts from '../src/parts-jsons/water-woman-parts.json' assert { type: 'json' };\n\nexport type ElementType = 'Stone' | 'Fire' | 'Water';\nexport type GenderType = 'Man' | 'Woman';\n\nconst partsData: Record<ElementType, Record<GenderType, PartCategory[]>> = {\n  Stone: { Man: stoneManParts, Woman: stoneWomanParts },\n  Fire: { Man: fireManParts, Woman: fireWomanParts },\n  Water: { Man: waterManParts, Woman: waterWomanParts },\n} as const;\n\nexport type GodMetadata = {\n  type: ElementType;\n  gender: GenderType;\n  parts: { [category: string]: string };\n};\n\nexport type ImageInfo = {\n  path: string;\n  drawOrder: number;\n};\n\ninterface PartCondition {\n  part: string;\n  values: string[];\n}\n\ntype PartItem = {\n  name: string;\n  images?: ImageInfo[];\n  percent?: number;\n  condition?: PartCondition;\n};\n\ntype PartCategory = {\n  name: string;\n  parts: PartItem[];\n};\n\nfunction getCategories(type: ElementType, gender: GenderType): PartCategory[] {\n  return partsData[type][gender];\n}\n\nfunction isPartAvailable(part: PartItem, metadata: GodMetadata): boolean {\n  if (!part.condition) return true;\n\n  let traitValue: string | undefined;\n  if (part.condition.part === 'Type') traitValue = metadata.type;\n  else if (part.condition.part === 'Gender') traitValue = metadata.gender;\n  else traitValue = metadata.parts[part.condition.part];\n\n  if (!traitValue) return false;\n  return part.condition.values.includes(traitValue);\n}\n\nfunction getAvailablePartsForCategory(\n  category: PartCategory,\n  metadata: GodMetadata,\n): PartItem[] {\n  return category.parts.filter((part) => isPartAvailable(part, metadata));\n}\n\nexport function getSelectedParts(metadata: GodMetadata): { [category: string]: PartItem } {\n  const categories = getCategories(metadata.type, metadata.gender);\n  const selectedParts: { [category: string]: PartItem } = {};\n\n  for (const category of categories) {\n    const availableParts = getAvailablePartsForCategory(category, metadata);\n    const selectedPartName = metadata.parts[category.name];\n    const selectedPart = availableParts.find((part) =>\n      part.name === selectedPartName\n    );\n    if (selectedPart) selectedParts[category.name] = selectedPart;\n  }\n\n  return selectedParts;\n}\n"]}