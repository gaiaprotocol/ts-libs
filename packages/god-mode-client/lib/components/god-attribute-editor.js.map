{"version":3,"file":"god-attribute-editor.js","sourceRoot":"","sources":["../../src/components/god-attribute-editor.ts"],"names":[],"mappings":"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","sourcesContent":["import '@ionic/core';\nimport '@shoelace-style/shoelace';\nimport { el } from '@webtaku/el';\nimport fireManParts from './parts/fire-man-parts.json' assert { type: 'json' };\nimport fireWomanParts from './parts/fire-woman-parts.json' assert { type: 'json' };\nimport stoneManParts from './parts/stone-man-parts.json' assert { type: 'json' };\nimport stoneWomanParts from './parts/stone-woman-parts.json' assert { type: 'json' };\nimport waterManParts from './parts/water-man-parts.json' assert { type: 'json' };\nimport waterWomanParts from './parts/water-woman-parts.json' assert { type: 'json' };\n\ntype ElementType = 'Stone' | 'Fire' | 'Water';\ntype GenderType = 'Man' | 'Woman';\n\ninterface GodMetadata {\n  type: ElementType;\n  gender: GenderType;\n  parts: { [trait: string]: string };\n}\n\ninterface ImageInfo {\n  path: string;\n  order: number;\n}\n\ninterface PartCondition {\n  trait: string;\n  values: string[];\n}\n\ninterface Part {\n  name: string;\n  images?: ImageInfo[];\n  percent?: number;\n  condition?: PartCondition;\n}\n\ninterface Trait {\n  name: string;\n  parts: Part[];\n}\n\nconst partsData: Record<ElementType, Record<GenderType, Trait[]>> = {\n  Stone: {\n    Man: stoneManParts,\n    Woman: stoneWomanParts,\n  },\n  Fire: {\n    Man: fireManParts,\n    Woman: fireWomanParts,\n  },\n  Water: {\n    Man: waterManParts,\n    Woman: waterWomanParts,\n  },\n} as const;\n\nclass PartSelector {\n  getTraits(type: ElementType, gender: GenderType): Trait[] {\n    return partsData[type][gender];\n  }\n\n  #isPartAvailable(part: Part, metadata: GodMetadata): boolean {\n    if (!part.condition) {\n      return true;\n    }\n\n    let traitValue: string | undefined;\n\n    if (part.condition.trait === 'Type') {\n      traitValue = metadata.type;\n    } else if (part.condition.trait === 'Gender') {\n      traitValue = metadata.gender;\n    } else {\n      traitValue = metadata.parts[part.condition.trait];\n    }\n\n    if (!traitValue) {\n      return false;\n    }\n\n    return part.condition.values.includes(traitValue);\n  }\n\n  getAvailablePartsForTrait(\n    trait: Trait,\n    metadata: GodMetadata,\n  ): Part[] {\n    return trait.parts.filter((part) => this.#isPartAvailable(part, metadata));\n  }\n\n  getSelectedParts(metadata: GodMetadata): { [trait: string]: Part } {\n    const traits = this.getTraits(metadata.type, metadata.gender);\n    const selectedParts: { [trait: string]: Part } = {};\n\n    for (const trait of traits) {\n      const availableParts = this.getAvailablePartsForTrait(trait, metadata);\n      const selectedPartName = metadata.parts[trait.name];\n      const selectedPart = availableParts.find((part) =>\n        part.name === selectedPartName\n      );\n      if (selectedPart) selectedParts[trait.name] = selectedPart;\n    }\n\n    return selectedParts;\n  }\n\n  getDefaultParts(type: ElementType, gender: GenderType) {\n    const traits = this.getTraits(type, gender);\n    const defaultParts: { [trait: string]: string } = {};\n\n    for (const trait of traits) {\n      if (trait.parts.length > 0) {\n        defaultParts[trait.name] = trait.parts[0].name;\n      }\n    }\n\n    return defaultParts;\n  }\n\n  validateMetadata(metadata: GodMetadata): string[] {\n    const errors: string[] = [];\n    const traits = this.getTraits(metadata.type, metadata.gender);\n\n    for (const trait of traits) {\n      const availableParts = this.getAvailablePartsForTrait(trait, metadata);\n      const selectedPartName = metadata.parts[trait.name];\n\n      if (availableParts.length === 0) {\n        if (selectedPartName) {\n          errors.push(\n            `No parts are available for trait '${trait.name}', but a part '${selectedPartName}' is selected.`,\n          );\n        }\n        continue;\n      }\n\n      if (!selectedPartName) {\n        errors.push(`Missing part for trait '${trait.name}'.`);\n        continue;\n      }\n\n      const part = availableParts.find((p) => p.name === selectedPartName);\n\n      if (!part) {\n        errors.push(\n          `Invalid part '${selectedPartName}' selected for trait '${trait.name}'.`,\n        );\n        continue;\n      }\n    }\n\n    return errors;\n  }\n}\n\nconst partSelector = new PartSelector();\n\nfunction createAttributeSelector<T>(label: string, values: T[], selected: T, onSelect: (value: T) => void): HTMLElement {\n  const container = el('ion-card.attribute-selector');\n\n  const header = el('ion-card-header',\n    el('ion-card-title', label)\n  );\n  const content = el('ion-card-content');\n\n  for (const value of values) {\n    const item = el('ion-chip.attribute-item', {\n      outline: true,\n      color: value === selected ? 'primary' : 'medium',\n      onclick: () => onSelect(value),\n    },\n      el('ion-label', String(value)),\n      value === selected ? el('sl-icon', { name: 'check', style: 'margin-left: 4px;' }) : null\n    );\n    content.append(item);\n  }\n\n  container.append(header, content);\n  return container;\n}\n\nexport async function createGodAttributeEditor(metadata: GodMetadata, onChange: (updated: GodMetadata) => void): Promise<HTMLElement> {\n  const container = el('ion-content.god-attribute-editor', { class: 'ion-padding' });\n\n  const render = () => {\n    container.innerHTML = '';\n\n    const typeSelector = createAttributeSelector<ElementType>('Element Type', ['Stone', 'Fire', 'Water'], metadata.type, (value) => {\n      metadata.type = value;\n      metadata.parts = partSelector.getDefaultParts(value, metadata.gender);\n      render();\n      onChange(metadata);\n    });\n    container.append(typeSelector);\n\n    const genderSelector = createAttributeSelector<GenderType>('Gender', ['Man', 'Woman'], metadata.gender, (value) => {\n      metadata.gender = value;\n      metadata.parts = partSelector.getDefaultParts(metadata.type, value);\n      render();\n      onChange(metadata);\n    });\n    container.append(genderSelector);\n\n    const traits = partSelector.getTraits(metadata.type, metadata.gender);\n\n    for (const trait of traits) {\n      const parts = partSelector.getAvailablePartsForTrait(trait, metadata);\n      if (parts.length === 0) continue;\n\n      if (!metadata.parts[trait.name] || !parts.find(p => p.name === metadata.parts[trait.name])) {\n        metadata.parts[trait.name] = parts[0].name;\n      }\n\n      const selector = createAttributeSelector<string>(trait.name, parts.map(p => p.name), metadata.parts[trait.name], (partName) => {\n        metadata.parts[trait.name] = partName;\n        render();\n        onChange(metadata);\n      });\n      container.append(selector);\n    }\n  };\n\n  render();\n  return container;\n}"]}